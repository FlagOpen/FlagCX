name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'flagcx/**'
      - 'test/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'flagcx/**'
      - 'test/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      build_flagcx: ${{ steps.filter.outputs.flagcx }}
      build_test: ${{ steps.filter.outputs.test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes in directories
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            flagcx:
              - 'flagcx/**'
            test:
              - 'test/**'

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Aliyun ACR
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com \
            -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Generate timestamp tag
        id: vars
        run: |
          echo "tag=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Build and push flagcx Docker image
        if: needs.detect-changes.outputs.build_flagcx == 'true'
        run: |
          docker build . --file Dockerfile \
            --tag crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/flagcx:${{ steps.vars.outputs.tag }}
          docker push crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/flagcx:${{ steps.vars.outputs.tag }}

      - name: Build and push test Docker image
        if: needs.detect-changes.outputs.build_test == 'true'
        run: |
          docker build . --file ./test/Dockerfile \
            --tag crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/test:${{ steps.vars.outputs.tag }}
          docker push crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/test:${{ steps.vars.outputs.tag }}

      - name: Output image info
        run: |
          echo "FlagCX Image: crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/flagcx:${{ steps.vars.outputs.tag }}"
          echo "Test Image: crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/test:${{ steps.vars.outputs.tag }}"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set up kubeconfig for Volcano Engine
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" > kubeconfig
          cat kubeconfig
          KUBECONFIG=./kubeconfig kubectl get pod -n test
        env:
          KUBECONFIG_DEV: ${{ secrets.KUBECONFIG_DEV }}

      - name: Deploy Test with new image
        if: needs.build-and-push.outputs.build_test == 'true'
        run: |
          KUBECONFIG=./kubeconfig kubectl set image deployment/test-dev  test=crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/test:${{ steps.vars.outputs.tag }} -n test
          KUBECONFIG=./kubeconfig kubectl rollout restart deployment/test-dev -n test

