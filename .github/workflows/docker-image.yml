name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'flagcx/**'
      - 'test/**'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'flagcx/**'
      - 'test/**'


jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      build_flagcx: ${{ steps.filter.outputs.flagcx }}
      build_test: ${{ steps.filter.outputs.test }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changes in directories
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            flagcx:
              - 'flagcx/**'
            test:
              - 'test/**'

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      flagcx_image: ${{ steps.flagcx_image.outputs.image }}
      test_image: ${{ steps.test_image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Aliyun ACR
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com \
            -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Generate timestamp tag
        id: vars
        run: |
          commit_id=$(git rev-parse --short HEAD)
          echo "commit_id=$commit_id" >> $GITHUB_ENV  # 将 commit_id 存储到环境变量中
          echo "commit_id=$commit_id" >> $GITHUB_OUTPUT  # 可选：也可以存储在 GITHUB_OUTPUT 中

      - name: Build and push flagcx Docker image
        if: needs.detect-changes.outputs.build_flagcx == 'true'
        id: flagcx_image
        run: |
          image="crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/flagcx:${{ steps.vars.outputs.commit_id }}"
          docker build . --file ./test/Dockerfile --tag $image
          docker push $image
          echo "::set-output name=image::$image"

      - name: Build and push test Docker image
        if: needs.detect-changes.outputs.build_test == 'true'
        id: test_image
        run: |
          image="crpi-w4le1oy1gd4wy3vu.cn-hangzhou.personal.cr.aliyuncs.com/ai-stack/test:${{ steps.vars.outputs.commit_id }}"
          docker build . --file ./test/Dockerfile --tag $image
          docker push $image
          echo "::set-output name=image::$image"

      - name: Output image info
        run: |
          echo "FlagCX Image: ${{ steps.flagcx_image.outputs.image }}"
          echo "Test Image: ${{ steps.test_image.outputs.image }}"

  deploy:
    needs: [detect-changes,build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Set up kubeconfig for Volcano Engine
        run: |
          echo "${{ secrets.KUBECONFIG_DEV }}" > kubeconfig
          KUBECONFIG=./kubeconfig kubectl get pod -n test

      - name: Deploy FlagCX with new image
        if: needs.detect-changes.outputs.build_flagcx == 'true'
        run: |
          echo "Using tag: ${{ needs.build-and-push.outputs.flagcx_image }}"
          KUBECONFIG=./kubeconfig kubectl set image deployment/flagcx-dev flagcx=${{ needs.build-and-push.outputs.flagcx_image }} -n test
          KUBECONFIG=./kubeconfig kubectl rollout restart deployment/flagcx-dev -n test

      - name: Deploy Test with new image
        if: needs.detect-changes.outputs.build_test == 'true'
        run: |
          echo "Using tag: ${{ needs.build-and-push.outputs.test_image }}"
          KUBECONFIG=./kubeconfig kubectl set image deployment/test-dev test=${{ needs.build-and-push.outputs.test_image }} -n test
          KUBECONFIG=./kubeconfig kubectl rollout restart deployment/test-dev -n test

