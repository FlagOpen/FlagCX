NCCL debug information disabled.
torchrun --nproc_per_node 8 --nnodes=1 --node_rank=0 --master_addr="localhost" --master_port=8281 example.py
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 0, world_size = 8, prev_rank: 7, next_rank: 1
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 1, world_size = 8, prev_rank: 0, next_rank: 2
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 2, world_size = 8, prev_rank: 1, next_rank: 3
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 3, world_size = 8, prev_rank: 2, next_rank: 4
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 4, world_size = 8, prev_rank: 3, next_rank: 5
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 5, world_size = 8, prev_rank: 4, next_rank: 6
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 7, world_size = 8, prev_rank: 6, next_rank: 0
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 6, world_size = 8, prev_rank: 5, next_rank: 7
rank 6 before broadcast with FLAGCX_GROUP2: x = tensor([0.2337, 0.1549, 0.3322, 0.4644, 0.3985, 0.2391, 0.9506, 0.6642],
       device='npu:6')
p-perf-huawei-06:73120:73120 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 3 before broadcast with FLAGCX_GROUP2: x = tensor([0.6968, 0.7996, 0.9462, 0.1961, 0.6924, 0.5221, 0.6834, 0.5585],
       device='npu:3')
p-perf-huawei-06:73117:73117 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 5 before broadcast with FLAGCX_GROUP2: x = tensor([0.7072, 0.9717, 0.1752, 0.9352, 0.6183, 0.6506, 0.0846, 0.9912],
       device='npu:5')
p-perf-huawei-06:73119:73119 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 7 before broadcast with FLAGCX_GROUP2: x = tensor([0.6257, 0.7266, 0.6192, 0.7236, 0.5083, 0.7634, 0.4111, 0.1821],
       device='npu:7')
p-perf-huawei-06:73121:73121 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 4 before broadcast with FLAGCX_GROUP2: x = tensor([0.8095, 0.1541, 0.6605, 0.5376, 0.0702, 0.9582, 0.9341, 0.2799],
       device='npu:4')
p-perf-huawei-06:73118:73118 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 0 before broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:0')
p-perf-huawei-06:73114:73114 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 0 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 5 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 3 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 6 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 4 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 7 of 8 ranks checked in
rank 1 before broadcast with FLAGCX_GROUP2: x = tensor([0.5736, 0.4709, 0.8072, 0.1759, 0.6486, 0.5824, 0.1973, 0.9881],
       device='npu:1')
p-perf-huawei-06:73115:73115 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 1 of 8 ranks checked in
rank 2 before broadcast with FLAGCX_GROUP2: x = tensor([0.2058, 0.6998, 0.4899, 0.4602, 0.1439, 0.4095, 0.5193, 0.7832],
       device='npu:2')
p-perf-huawei-06:73116:73116 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO Bootstrap Root : rank 2 of 8 ranks checked in
p-perf-huawei-06:73114:74204 [0] FLAGCX INFO SENT OUT ALL 8 HANDLES
p-perf-huawei-06:73120:73120 [0] FLAGCX INFO rank 6 nranks 8 - DONE
p-perf-huawei-06:73119:73119 [0] FLAGCX INFO rank 5 nranks 8 - DONE
p-perf-huawei-06:73118:73118 [0] FLAGCX INFO rank 4 nranks 8 - DONE
p-perf-huawei-06:73114:73114 [0] FLAGCX INFO rank 0 nranks 8 - DONE
p-perf-huawei-06:73116:73116 [0] FLAGCX INFO rank 2 nranks 8 - DONE
p-perf-huawei-06:73121:73121 [0] FLAGCX INFO rank 7 nranks 8 - DONE
p-perf-huawei-06:73117:73117 [0] FLAGCX INFO rank 3 nranks 8 - DONE
p-perf-huawei-06:73115:73115 [0] FLAGCX INFO rank 1 nranks 8 - DONE
p-perf-huawei-06:73114:73114 [0] FLAGCX INFO rank = 0, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 0, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73116:73116 [0] FLAGCX INFO rank = 2, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 2, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73120:73120 [0] FLAGCX INFO rank = 6, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 6, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73115:73115 [0] FLAGCX INFO rank = 1, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 1, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73118:73118 [0] FLAGCX INFO rank = 4, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 4, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73117:73117 [0] FLAGCX INFO rank = 3, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 3, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73121:73121 [0] FLAGCX INFO rank = 7, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 7, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73119:73119 [0] FLAGCX INFO rank = 5, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 5, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
rank 6 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:6')rank 2 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:2')

rank 1 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:1')
rank 5 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:5')
rank 7 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:7')
rank 3 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:3')
rank 4 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:4')
rank 0 after broadcast with FLAGCX_GROUP2: x = tensor([0.4827, 0.7092, 0.4916, 0.1747, 0.7813, 0.0564, 0.6390, 0.5829],
       device='npu:0')
rank 5 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5')
rank 1 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1')rank 7 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7')

rank 2 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2')
rank 6 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6')
rank 3 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3')
rank 4 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4')
rank 0 before reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0')
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 0 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 7 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 2 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 6 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 5 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 3 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 1 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO Bootstrap Root : rank 4 of 8 ranks checked in
p-perf-huawei-06:73114:75087 [0] FLAGCX INFO SENT OUT ALL 8 HANDLES
p-perf-huawei-06:73114:73114 [0] FLAGCX INFO rank 0 nranks 8 - DONE
p-perf-huawei-06:73119:73119 [0] FLAGCX INFO rank 5 nranks 8 - DONE
p-perf-huawei-06:73115:73115 [0] FLAGCX INFO rank 1 nranks 8 - DONE
p-perf-huawei-06:73116:73116 [0] FLAGCX INFO rank 2 nranks 8 - DONE
p-perf-huawei-06:73118:73118 [0] FLAGCX INFO rank 4 nranks 8 - DONE
p-perf-huawei-06:73117:73117 [0] FLAGCX INFO rank 3 nranks 8 - DONE
p-perf-huawei-06:73121:73121 [0] FLAGCX INFO rank 7 nranks 8 - DONE
p-perf-huawei-06:73120:73120 [0] FLAGCX INFO rank 6 nranks 8 - DONE
p-perf-huawei-06:73114:73114 [0] FLAGCX INFO rank = 0, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 0, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73118:73118 [0] FLAGCX INFO rank = 4, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 4, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73120:73120 [0] FLAGCX INFO rank = 6, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 6, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73121:73121 [0] FLAGCX INFO rank = 7, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 7, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73117:73117 [0] FLAGCX INFO rank = 3, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 3, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73115:73115 [0] FLAGCX INFO rank = 1, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 1, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73119:73119 [0] FLAGCX INFO rank = 5, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 5, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:73116:73116 [0] FLAGCX INFO rank = 2, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 2, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
rank 2 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2')rank 7 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7')

rank 4 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4')
rank 3 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3')
rank 0 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([ 0.,  8., 16., 24., 32., 40., 48., 56.], device='npu:0')
rank 1 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1')
rank 6 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6')
rank 5 after reduce on src rank 0 with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5')
rank 4 before allreduce: x = tensor([0.7732, 0.4428, 0.9267, 0.0386, 0.1247, 0.0225, 0.6346, 0.1103],
       device='npu:4'), y = tensor([0.6103, 0.9564, 0.5206, 0.1637, 0.1632, 0.9672, 0.4884, 0.6550],
       device='npu:4')
rank 3 before allreduce: x = tensor([0.5839, 0.3449, 0.8431, 0.8159, 0.3168, 0.0942, 0.3756, 0.6642],
       device='npu:3'), y = tensor([0.1145, 0.2576, 0.3693, 0.6007, 0.9091, 0.2633, 0.6507, 0.5078],
       device='npu:3')
rank 1 before allreduce: x = tensor([0.3990, 0.1228, 0.2302, 0.1025, 0.8516, 0.7328, 0.6180, 0.3077],
       device='npu:1'), y = tensor([5.9776e-01, 4.8965e-04, 9.5452e-01, 3.2873e-01, 4.6068e-01, 2.7488e-01,
        6.8044e-01, 7.6121e-01], device='npu:1')
rank 0 before allreduce: x = tensor([0.6983, 0.0760, 0.5456, 0.8166, 0.9716, 0.5853, 0.0727, 0.9235],
       device='npu:0'), y = tensor([0.0686, 0.4525, 0.9530, 0.6778, 0.6629, 0.2183, 0.6189, 0.6176],
       device='npu:0')
rank 7 before allreduce: x = tensor([0.8033, 0.8043, 0.1210, 0.6616, 0.2798, 0.2041, 0.5978, 0.5107],
       device='npu:7'), y = tensor([0.5263, 0.9589, 0.3903, 0.9916, 0.3002, 0.8356, 0.4718, 0.9283],
       device='npu:7')
rank 5 before allreduce: x = tensor([0.9777, 0.3165, 0.9753, 0.3969, 0.7346, 0.8566, 0.3031, 0.3719],
       device='npu:5'), y = tensor([0.5938, 0.8576, 0.2429, 0.4238, 0.4667, 0.4389, 0.2509, 0.4786],
       device='npu:5')
rank 6 before allreduce: x = tensor([0.5687, 0.8558, 0.6227, 0.0505, 0.9283, 0.1806, 0.7747, 0.5438],
       device='npu:6'), y = tensor([0.7242, 0.8524, 0.5023, 0.6219, 0.4486, 0.0947, 0.1518, 0.1865],
       device='npu:6')
rank 2 before allreduce: x = tensor([0.0682, 0.2056, 0.7789, 0.6467, 0.0980, 0.0033, 0.9282, 0.9988],
       device='npu:2'), y = tensor([0.4673, 0.8021, 0.2908, 0.6985, 0.4954, 0.7366, 0.7854, 0.0755],
       device='npu:2')
rank 5 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:5')rank 1 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:1')

rank 4 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:4')
rank 3 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:3')
rank 2 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:2')rank 0 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:0')

rank 6 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:6')
rank 7 after allreduce min with FLAGCX_GROUP1: x = tensor([0.0682, 0.0760, 0.1210, 0.0386, 0.0980, 0.0033, 0.0727, 0.1103],
       device='npu:7')
rank 4 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:4')
rank 3 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:3')
rank 2 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:2')rank 1 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:1')

rank 5 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:5')
rank 0 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:0')
rank 7 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:7')rank 6 after allreduce max with FLAGCX_GROUP1: y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:6')

rank 3 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:3')
rank 5 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:5')rank 4 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:4')rank 2 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:2')rank 1 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:1')



rank 0 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:0')
rank 6 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:6')
rank 7 after allreduce sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:7')
rank 3 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:3'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:3')rank 4 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:4'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:4')rank 1 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:1'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:1')


rank 2 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:2'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:2')rank 5 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:5'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:5')

rank 0 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:0'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:0')
rank 6 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:6'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:6')
rank 7 before all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([0.5453, 0.6079, 0.9680, 0.3089, 0.7842, 0.0261, 0.5817, 0.8821],
       device='npu:7'), y = tensor([0.7242, 0.9589, 0.9545, 0.9916, 0.9091, 0.9672, 0.7854, 0.9283],
       device='npu:7')
rank 3 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:3'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:3')rank 1 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:1'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:1')

rank 2 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:2'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:2')
rank 5 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:5'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:5')
rank 4 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:4'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:4')
rank 6 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:6'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:6')
rank 7 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:7'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:7')
rank 0 after all_reduce_coalesced sync sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:0'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:0')
rank 3 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:3'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:3')
rank 1 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:1'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:1')
rank 5 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:5'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:5')rank 2 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:2'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:2')

rank 7 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:7'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:7')
rank 4 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:4'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:4')
rank 6 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:6'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:6')
rank 0 before all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([4.3620, 4.8636, 7.7438, 2.4708, 6.2735, 0.2084, 4.6539, 7.0572],
       device='npu:0'), y = tensor([5.7938, 7.6710, 7.6362, 7.9329, 7.2729, 7.7376, 6.2832, 7.4266],
       device='npu:0')
rank 1 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:1'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:1')
rank 4 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:4'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:4')rank 2 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:2'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:2')
rank 7 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:7'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:7')rank 3 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:3'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:3')

rank 5 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:5'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:5')

rank 6 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:6'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:6')
rank 0 after all_reduce_coalesced async sum with FLAGCX_GROUP1: x = tensor([34.8961, 38.9085, 61.9508, 19.7666, 50.1878,  1.6672, 37.2314, 56.4574],
       device='npu:0'), y = tensor([46.3505, 61.3681, 61.0894, 63.4632, 58.1829, 61.9006, 50.2653, 59.4125],
       device='npu:0')
rank 0 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0.5578, 0.2897, 0.8010, 0.5680, 0.9479, 0.2189, 0.7060, 0.3057],
       device='npu:0')
rank 1 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0.7466, 0.4087, 0.1798, 0.9331, 0.8885, 0.9026, 0.3314, 0.1670],
       device='npu:1')
rank 4 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0.4116, 0.4782, 0.9321, 0.6459, 0.9088, 0.2981, 0.2767, 0.5169],
       device='npu:4')
rank 7 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0.7638, 0.8644, 0.3775, 0.9553, 0.0456, 0.7178, 0.7463, 0.0432],
       device='npu:7')
rank 2 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0.9519, 0.9158, 0.5253, 0.1710, 0.7534, 0.7442, 0.0492, 0.1817],
       device='npu:2')
rank 5 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0.2243, 0.6693, 0.3787, 0.4070, 0.3188, 0.6157, 0.9538, 0.0444],
       device='npu:5')
rank 3 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0.3187, 0.3797, 0.9005, 0.7750, 0.0452, 0.7003, 0.6709, 0.2851],
       device='npu:3')
rank 6 before batch_isend_irecv with FLAGCX_GROUP2: x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0.7711, 0.2091, 0.7169, 0.3085, 0.0067, 0.4283, 0.8668, 0.3690],
       device='npu:6')
rank 1 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')
rank 2 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:2')rank 4 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:4')

rank 3 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:3')
rank 5 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:5')
rank 0 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:0')
rank 7 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:7')
rank 6 after batch_isend_irecv with FLAGCX_GROUP2: x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:6')
rank 1 after send/recv with FLAGCX_GROUP2: x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')
rank 0 after send/recv with FLAGCX_GROUP2: x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:0')
rank 3 after send/recv with FLAGCX_GROUP2: x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:3')
rank 4 after send/recv with FLAGCX_GROUP2: x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:4')
rank 2 after send/recv with FLAGCX_GROUP2: x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:2')
rank 6 after send/recv with FLAGCX_GROUP2: x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:6')
rank 5 after send/recv with FLAGCX_GROUP2: x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:5')
rank 7 after send/recv with FLAGCX_GROUP2: x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:7')
rank 0 before _all_gather_base with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), y = tensor([0.2383, 0.4203, 0.0031, 0.7369, 0.2573, 0.1350, 0.9433, 0.3821],
       device='npu:0')
rank 1 before _all_gather_base with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), y = tensor([0.4845, 0.8782, 0.8404, 0.9855, 0.1573, 0.1124, 0.7374, 0.8384],
       device='npu:1')
rank 3 before _all_gather_base with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), y = tensor([0.0374, 0.8936, 0.2672, 0.1441, 0.8798, 0.2641, 0.4073, 0.1783],
       device='npu:3')
rank 2 before _all_gather_base with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), y = tensor([0.8688, 0.8481, 0.6987, 0.2633, 0.1377, 0.7203, 0.3489, 0.1610],
       device='npu:2')
rank 4 before _all_gather_base with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), y = tensor([0.7105, 0.6792, 0.2644, 0.6642, 0.9119, 0.6164, 0.5963, 0.9737],
       device='npu:4')
rank 6 before _all_gather_base with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), y = tensor([0.0483, 0.1430, 0.1070, 0.6340, 0.9339, 0.0081, 0.0884, 0.6768],
       device='npu:6')
rank 5 before _all_gather_base with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), y = tensor([0.3842, 0.7275, 0.9180, 0.4801, 0.6992, 0.3315, 0.6837, 0.0163],
       device='npu:5')
rank 7 before _all_gather_base with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), y = tensor([0.2387, 0.4280, 0.6574, 0.8748, 0.9779, 0.4602, 0.6239, 0.2104],
       device='npu:7')
rank 4 after _all_gather_base with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4')
rank 3 after _all_gather_base with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3')rank 1 after _all_gather_base with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1')

rank 7 after _all_gather_base with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7')
rank 2 after _all_gather_base with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2')
rank 0 after _all_gather_base with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0')
rank 6 after _all_gather_base with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6')
rank 5 after _all_gather_base with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5')
rank 3 before all_gather with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), z_list = [tensor([0.7903], device='npu:3'), tensor([0.3699], device='npu:3'), tensor([0.6291], device='npu:3'), tensor([0.5722], device='npu:3'), tensor([0.6836], device='npu:3'), tensor([0.4496], device='npu:3'), tensor([0.9636], device='npu:3'), tensor([0.7831], device='npu:3')]rank 1 before all_gather with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), z_list = [tensor([0.9402], device='npu:1'), tensor([0.2376], device='npu:1'), tensor([0.7040], device='npu:1'), tensor([0.6268], device='npu:1'), tensor([0.4827], device='npu:1'), tensor([0.8126], device='npu:1'), tensor([0.5409], device='npu:1'), tensor([0.3647], device='npu:1')]rank 7 before all_gather with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), z_list = [tensor([0.6630], device='npu:7'), tensor([0.8180], device='npu:7'), tensor([0.5470], device='npu:7'), tensor([0.7415], device='npu:7'), tensor([0.6576], device='npu:7'), tensor([0.6367], device='npu:7'), tensor([0.0103], device='npu:7'), tensor([0.1097], device='npu:7')]


rank 4 before all_gather with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), z_list = [tensor([0.8044], device='npu:4'), tensor([0.4078], device='npu:4'), tensor([0.6528], device='npu:4'), tensor([0.7239], device='npu:4'), tensor([0.1117], device='npu:4'), tensor([0.6042], device='npu:4'), tensor([0.9232], device='npu:4'), tensor([0.3224], device='npu:4')]rank 2 before all_gather with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), z_list = [tensor([0.0074], device='npu:2'), tensor([0.4722], device='npu:2'), tensor([0.9223], device='npu:2'), tensor([0.9142], device='npu:2'), tensor([0.3015], device='npu:2'), tensor([0.6952], device='npu:2'), tensor([0.1148], device='npu:2'), tensor([0.1914], device='npu:2')]

rank 6 before all_gather with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), z_list = [tensor([0.5781], device='npu:6'), tensor([0.5949], device='npu:6'), tensor([0.7637], device='npu:6'), tensor([0.4886], device='npu:6'), tensor([0.9653], device='npu:6'), tensor([0.6914], device='npu:6'), tensor([0.9845], device='npu:6'), tensor([0.2829], device='npu:6')]
rank 0 before all_gather with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), z_list = [tensor([0.9238], device='npu:0'), tensor([0.3856], device='npu:0'), tensor([0.0031], device='npu:0'), tensor([0.4392], device='npu:0'), tensor([0.5152], device='npu:0'), tensor([0.4117], device='npu:0'), tensor([0.9396], device='npu:0'), tensor([0.1462], device='npu:0')]
rank 5 before all_gather with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), z_list = [tensor([0.1372], device='npu:5'), tensor([0.0700], device='npu:5'), tensor([0.0099], device='npu:5'), tensor([0.7821], device='npu:5'), tensor([0.5085], device='npu:5'), tensor([0.3485], device='npu:5'), tensor([0.3527], device='npu:5'), tensor([0.0191], device='npu:5')]
rank 3 after all_gather with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), z_list = [tensor([0.], device='npu:3'), tensor([1.], device='npu:3'), tensor([2.], device='npu:3'), tensor([3.], device='npu:3'), tensor([4.], device='npu:3'), tensor([5.], device='npu:3'), tensor([6.], device='npu:3'), tensor([7.], device='npu:3')]
rank 7 after all_gather with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), z_list = [tensor([0.], device='npu:7'), tensor([1.], device='npu:7'), tensor([2.], device='npu:7'), tensor([3.], device='npu:7'), tensor([4.], device='npu:7'), tensor([5.], device='npu:7'), tensor([6.], device='npu:7'), tensor([7.], device='npu:7')]
rank 1 after all_gather with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), z_list = [tensor([0.], device='npu:1'), tensor([1.], device='npu:1'), tensor([2.], device='npu:1'), tensor([3.], device='npu:1'), tensor([4.], device='npu:1'), tensor([5.], device='npu:1'), tensor([6.], device='npu:1'), tensor([7.], device='npu:1')]
rank 4 after all_gather with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), z_list = [tensor([0.], device='npu:4'), tensor([1.], device='npu:4'), tensor([2.], device='npu:4'), tensor([3.], device='npu:4'), tensor([4.], device='npu:4'), tensor([5.], device='npu:4'), tensor([6.], device='npu:4'), tensor([7.], device='npu:4')]
rank 2 after all_gather with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), z_list = [tensor([0.], device='npu:2'), tensor([1.], device='npu:2'), tensor([2.], device='npu:2'), tensor([3.], device='npu:2'), tensor([4.], device='npu:2'), tensor([5.], device='npu:2'), tensor([6.], device='npu:2'), tensor([7.], device='npu:2')]
rank 0 after all_gather with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), z_list = [tensor([0.], device='npu:0'), tensor([1.], device='npu:0'), tensor([2.], device='npu:0'), tensor([3.], device='npu:0'), tensor([4.], device='npu:0'), tensor([5.], device='npu:0'), tensor([6.], device='npu:0'), tensor([7.], device='npu:0')]
rank 5 after all_gather with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), z_list = [tensor([0.], device='npu:5'), tensor([1.], device='npu:5'), tensor([2.], device='npu:5'), tensor([3.], device='npu:5'), tensor([4.], device='npu:5'), tensor([5.], device='npu:5'), tensor([6.], device='npu:5'), tensor([7.], device='npu:5')]
rank 6 after all_gather with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), z_list = [tensor([0.], device='npu:6'), tensor([1.], device='npu:6'), tensor([2.], device='npu:6'), tensor([3.], device='npu:6'), tensor([4.], device='npu:6'), tensor([5.], device='npu:6'), tensor([6.], device='npu:6'), tensor([7.], device='npu:6')]
rank 4 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]rank 6 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]

rank 3 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 5 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 7 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 0 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 1 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 2 after all_gather_object with FLAGCX_GROUP1: all_rank_infos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]
rank 0 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0'), z = tensor([0.], device='npu:0'), z1 = tensor([0.], device='npu:0')
rank 3 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3'), z = tensor([3.], device='npu:3'), z1 = tensor([30.], device='npu:3')
rank 4 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4'), z = tensor([4.], device='npu:4'), z1 = tensor([40.], device='npu:4')
rank 7 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7'), z = tensor([7.], device='npu:7'), z1 = tensor([70.], device='npu:7')
rank 1 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1'), z = tensor([1.], device='npu:1'), z1 = tensor([10.], device='npu:1')
rank 5 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5'), z = tensor([5.], device='npu:5'), z1 = tensor([50.], device='npu:5')
rank 6 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6'), z = tensor([6.], device='npu:6'), z1 = tensor([60.], device='npu:6')
rank 2 before all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2'), z = tensor([2.], device='npu:2'), z1 = tensor([20.], device='npu:2')
rank 0 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:0'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0'), z = tensor([0.], device='npu:0'), z1 = tensor([0.], device='npu:0')
rank 1 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1'), z = tensor([1.], device='npu:1'), z1 = tensor([10.], device='npu:1')
rank 7 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7'), z = tensor([7.], device='npu:7'), z1 = tensor([70.], device='npu:7')
rank 3 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3'), z = tensor([3.], device='npu:3'), z1 = tensor([30.], device='npu:3')
rank 4 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4'), z = tensor([4.], device='npu:4'), z1 = tensor([40.], device='npu:4')
rank 5 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5'), z = tensor([5.], device='npu:5'), z1 = tensor([50.], device='npu:5')
rank 6 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6'), z = tensor([6.], device='npu:6'), z1 = tensor([60.], device='npu:6')
rank 2 after all_gather_coalesced sync with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2'), z = tensor([2.], device='npu:2'), z1 = tensor([20.], device='npu:2')
rank 0 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.5777, 0.1712, 0.7986, 0.4957, 0.8762, 0.6707, 0.0062, 0.1388],
       device='npu:0'), y = tensor([0.7814, 0.9316, 0.1822, 0.6512, 0.3126, 0.0119, 0.5186, 0.8364],
       device='npu:0'), z = tensor([0.], device='npu:0'), z1 = tensor([0.], device='npu:0')
rank 3 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.1871, 0.7818, 0.4312, 0.8274, 0.3783, 0.4963, 0.6925, 0.4608],
       device='npu:3'), y = tensor([7.8075e-01, 6.8905e-01, 2.6098e-01, 8.0005e-01, 5.5370e-01, 9.9819e-01,
        9.6049e-01, 6.8802e-04], device='npu:3'), z = tensor([3.], device='npu:3'), z1 = tensor([30.], device='npu:3')
rank 1 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.9045, 0.6626, 0.3302, 0.8224, 0.6896, 0.8712, 0.6465, 0.6848],
       device='npu:1'), y = tensor([0.8681, 0.6149, 0.7872, 0.2647, 0.5457, 0.5542, 0.3539, 0.8548],
       device='npu:1'), z = tensor([1.], device='npu:1'), z1 = tensor([10.], device='npu:1')
rank 7 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.7709, 0.6645, 0.9203, 0.4654, 0.3319, 0.3459, 0.9231, 0.1059],
       device='npu:7'), y = tensor([0.1464, 0.0180, 0.6748, 0.6113, 0.3233, 0.3920, 0.3204, 0.0262],
       device='npu:7'), z = tensor([7.], device='npu:7'), z1 = tensor([70.], device='npu:7')
rank 4 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.7049, 0.1161, 0.0744, 0.6498, 0.7156, 0.0447, 0.7730, 0.9683],
       device='npu:4'), y = tensor([0.5290, 0.1195, 0.9254, 0.1877, 0.6516, 0.2723, 0.7765, 0.4213],
       device='npu:4'), z = tensor([4.], device='npu:4'), z1 = tensor([40.], device='npu:4')
rank 5 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.7183, 0.5443, 0.4862, 0.7916, 0.1899, 0.5886, 0.6555, 0.0118],
       device='npu:5'), y = tensor([0.5850, 0.9277, 0.4056, 0.7994, 0.2587, 0.5983, 0.6961, 0.9953],
       device='npu:5'), z = tensor([5.], device='npu:5'), z1 = tensor([50.], device='npu:5')
rank 2 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.3590, 0.0571, 0.9165, 0.8510, 0.8206, 0.0818, 0.9474, 0.8659],
       device='npu:2'), y = tensor([0.9156, 0.2961, 0.2533, 0.4005, 0.2416, 0.2016, 0.8320, 0.2096],
       device='npu:2'), z = tensor([2.], device='npu:2'), z1 = tensor([20.], device='npu:2')
rank 6 before all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([0.5773, 0.9357, 0.5592, 0.4019, 0.6987, 0.3536, 0.2914, 0.7020],
       device='npu:6'), y = tensor([0.4701, 0.8466, 0.3963, 0.1801, 0.0509, 0.7311, 0.9259, 0.7852],
       device='npu:6'), z = tensor([6.], device='npu:6'), z1 = tensor([60.], device='npu:6')
rank 0 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:0'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0'), z = tensor([0.], device='npu:0'), z1 = tensor([0.], device='npu:0')
rank 3 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3'), z = tensor([3.], device='npu:3'), z1 = tensor([30.], device='npu:3')
rank 4 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4'), z = tensor([4.], device='npu:4'), z1 = tensor([40.], device='npu:4')rank 1 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1'), z = tensor([1.], device='npu:1'), z1 = tensor([10.], device='npu:1')

rank 7 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7'), z = tensor([7.], device='npu:7'), z1 = tensor([70.], device='npu:7')
rank 5 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5'), z = tensor([5.], device='npu:5'), z1 = tensor([50.], device='npu:5')
rank 2 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2'), z = tensor([2.], device='npu:2'), z1 = tensor([20.], device='npu:2')
rank 6 after all_gather_coalesced async with FLAGCX_GROUP1: x = tensor([ 0., 10., 20., 30., 40., 50., 60., 70.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6'), z = tensor([6.], device='npu:6'), z1 = tensor([60.], device='npu:6')
rank 3 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:3'), tensor([1.], device='npu:3'), tensor([2.], device='npu:3'), tensor([3.], device='npu:3'), tensor([4.], device='npu:3'), tensor([5.], device='npu:3'), tensor([6.], device='npu:3'), tensor([7.], device='npu:3')], z = tensor([0.], device='npu:3')
rank 7 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:7'), tensor([1.], device='npu:7'), tensor([2.], device='npu:7'), tensor([3.], device='npu:7'), tensor([4.], device='npu:7'), tensor([5.], device='npu:7'), tensor([6.], device='npu:7'), tensor([7.], device='npu:7')], z = tensor([0.], device='npu:7')
rank 2 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:2'), tensor([1.], device='npu:2'), tensor([2.], device='npu:2'), tensor([3.], device='npu:2'), tensor([4.], device='npu:2'), tensor([5.], device='npu:2'), tensor([6.], device='npu:2'), tensor([7.], device='npu:2')], z = tensor([0.], device='npu:2')rank 1 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:1'), tensor([1.], device='npu:1'), tensor([2.], device='npu:1'), tensor([3.], device='npu:1'), tensor([4.], device='npu:1'), tensor([5.], device='npu:1'), tensor([6.], device='npu:1'), tensor([7.], device='npu:1')], z = tensor([0.], device='npu:1')

rank 4 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:4'), tensor([1.], device='npu:4'), tensor([2.], device='npu:4'), tensor([3.], device='npu:4'), tensor([4.], device='npu:4'), tensor([5.], device='npu:4'), tensor([6.], device='npu:4'), tensor([7.], device='npu:4')], z = tensor([0.], device='npu:4')
rank 5 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:5'), tensor([1.], device='npu:5'), tensor([2.], device='npu:5'), tensor([3.], device='npu:5'), tensor([4.], device='npu:5'), tensor([5.], device='npu:5'), tensor([6.], device='npu:5'), tensor([7.], device='npu:5')], z = tensor([0.], device='npu:5')
rank 0 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:0'), tensor([1.], device='npu:0'), tensor([2.], device='npu:0'), tensor([3.], device='npu:0'), tensor([4.], device='npu:0'), tensor([5.], device='npu:0'), tensor([6.], device='npu:0'), tensor([7.], device='npu:0')], z = tensor([0.], device='npu:0')
rank 6 before reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:6'), tensor([1.], device='npu:6'), tensor([2.], device='npu:6'), tensor([3.], device='npu:6'), tensor([4.], device='npu:6'), tensor([5.], device='npu:6'), tensor([6.], device='npu:6'), tensor([7.], device='npu:6')], z = tensor([0.], device='npu:6')
rank 3 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:3'), tensor([1.], device='npu:3'), tensor([2.], device='npu:3'), tensor([3.], device='npu:3'), tensor([4.], device='npu:3'), tensor([5.], device='npu:3'), tensor([6.], device='npu:3'), tensor([7.], device='npu:3')], z = tensor([24.], device='npu:3')
rank 4 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:4'), tensor([1.], device='npu:4'), tensor([2.], device='npu:4'), tensor([3.], device='npu:4'), tensor([4.], device='npu:4'), tensor([5.], device='npu:4'), tensor([6.], device='npu:4'), tensor([7.], device='npu:4')], z = tensor([32.], device='npu:4')
rank 7 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:7'), tensor([1.], device='npu:7'), tensor([2.], device='npu:7'), tensor([3.], device='npu:7'), tensor([4.], device='npu:7'), tensor([5.], device='npu:7'), tensor([6.], device='npu:7'), tensor([7.], device='npu:7')], z = tensor([56.], device='npu:7')
rank 5 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:5'), tensor([1.], device='npu:5'), tensor([2.], device='npu:5'), tensor([3.], device='npu:5'), tensor([4.], device='npu:5'), tensor([5.], device='npu:5'), tensor([6.], device='npu:5'), tensor([7.], device='npu:5')], z = tensor([40.], device='npu:5')
rank 0 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:0'), tensor([1.], device='npu:0'), tensor([2.], device='npu:0'), tensor([3.], device='npu:0'), tensor([4.], device='npu:0'), tensor([5.], device='npu:0'), tensor([6.], device='npu:0'), tensor([7.], device='npu:0')], z = tensor([0.], device='npu:0')
rank 6 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:6'), tensor([1.], device='npu:6'), tensor([2.], device='npu:6'), tensor([3.], device='npu:6'), tensor([4.], device='npu:6'), tensor([5.], device='npu:6'), tensor([6.], device='npu:6'), tensor([7.], device='npu:6')], z = tensor([48.], device='npu:6')
rank 1 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:1'), tensor([1.], device='npu:1'), tensor([2.], device='npu:1'), tensor([3.], device='npu:1'), tensor([4.], device='npu:1'), tensor([5.], device='npu:1'), tensor([6.], device='npu:1'), tensor([7.], device='npu:1')], z = tensor([8.], device='npu:1')
rank 2 after reduce_scatter with FLAGCX_GROUP1: x_list = [tensor([0.], device='npu:2'), tensor([1.], device='npu:2'), tensor([2.], device='npu:2'), tensor([3.], device='npu:2'), tensor([4.], device='npu:2'), tensor([5.], device='npu:2'), tensor([6.], device='npu:2'), tensor([7.], device='npu:2')], z = tensor([16.], device='npu:2')
rank 3 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), z = tensor([24.], device='npu:3')
rank 0 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), z = tensor([0.], device='npu:0')
rank 4 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), z = tensor([32.], device='npu:4')
rank 7 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), z = tensor([56.], device='npu:7')
rank 5 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), z = tensor([40.], device='npu:5')
rank 6 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), z = tensor([48.], device='npu:6')
rank 1 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), z = tensor([8.], device='npu:1')
rank 2 before _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), z = tensor([16.], device='npu:2')
rank 0 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), z = tensor([7.], device='npu:0')
rank 4 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), z = tensor([7.], device='npu:4')
rank 5 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), z = tensor([7.], device='npu:5')
rank 3 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), z = tensor([7.], device='npu:3')
rank 7 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), z = tensor([7.], device='npu:7')
rank 1 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), z = tensor([7.], device='npu:1')
rank 2 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), z = tensor([7.], device='npu:2')
rank 6 after _reduce_scatter_base with FLAGCX_GROUP1: x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), z = tensor([7.], device='npu:6')
rank 0 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.1687, 0.1667, 0.6084, 0.8638, 0.8805, 0.1161, 0.6383, 0.4551],
       device='npu:0'), y = tensor([0.9529, 0.2727, 0.0286, 0.9418, 0.3721, 0.6264, 0.4074, 0.9490],
       device='npu:0'), z=tensor([0.], device='npu:0'), z1=tensor([0.], device='npu:0')
rank 5 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.8069, 0.6350, 0.9907, 0.7251, 0.5354, 0.7142, 0.3754, 0.0464],
       device='npu:5'), y = tensor([0.3279, 0.2263, 0.8199, 0.9692, 0.1157, 0.3686, 0.3923, 0.9464],
       device='npu:5'), z=tensor([0.], device='npu:5'), z1=tensor([0.], device='npu:5')rank 3 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.4081, 0.3744, 0.7777, 0.9712, 0.6375, 0.2465, 0.3232, 0.3850],
       device='npu:3'), y = tensor([0.6049, 0.2146, 0.9350, 0.5193, 0.1418, 0.4308, 0.5409, 0.0543],
       device='npu:3'), z=tensor([0.], device='npu:3'), z1=tensor([0.], device='npu:3')

rank 4 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.8157, 0.0110, 0.0064, 0.0816, 0.8963, 0.1820, 0.9737, 0.4943],
       device='npu:4'), y = tensor([0.7354, 0.3057, 0.4299, 0.8695, 0.4783, 0.6294, 0.3675, 0.3891],
       device='npu:4'), z=tensor([0.], device='npu:4'), z1=tensor([0.], device='npu:4')
rank 1 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.3866, 0.3066, 0.1267, 0.6147, 0.8146, 0.7271, 0.3425, 0.8121],
       device='npu:1'), y = tensor([0.4144, 0.3269, 0.1725, 0.0747, 0.6389, 0.1744, 0.8382, 0.6625],
       device='npu:1'), z=tensor([0.], device='npu:1'), z1=tensor([0.], device='npu:1')
rank 7 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.2951, 0.0139, 0.4131, 0.9280, 0.3764, 0.0809, 0.0562, 0.4123],
       device='npu:7'), y = tensor([0.2338, 0.7257, 0.0369, 0.2448, 0.9684, 0.0554, 0.4771, 0.7827],
       device='npu:7'), z=tensor([0.], device='npu:7'), z1=tensor([0.], device='npu:7')
rank 2 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.4597, 0.8458, 0.6647, 0.5016, 0.6279, 0.2274, 0.6052, 0.0447],
       device='npu:2'), y = tensor([0.9667, 0.6510, 0.7080, 0.3350, 0.3821, 0.2127, 0.7783, 0.5833],
       device='npu:2'), z=tensor([0.], device='npu:2'), z1=tensor([0.], device='npu:2')
rank 6 before reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.5787, 0.7362, 0.1746, 0.3652, 0.8454, 0.7393, 0.6327, 0.1332],
       device='npu:6'), y = tensor([0.8657, 0.7017, 0.1281, 0.5622, 0.5803, 0.6310, 0.6485, 0.3444],
       device='npu:6'), z=tensor([0.], device='npu:6'), z1=tensor([0.], device='npu:6')
rank 3 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.4081, 0.3744, 0.7777, 0.9712, 0.6375, 0.2465, 0.3232, 0.3850],
       device='npu:3'), y = tensor([0.6049, 0.2146, 0.9350, 0.5193, 0.1418, 0.4308, 0.5409, 0.0543],
       device='npu:3'), z=tensor([5.0512], device='npu:3'), z1=tensor([4.5165], device='npu:3')
rank 5 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.8069, 0.6350, 0.9907, 0.7251, 0.5354, 0.7142, 0.3754, 0.0464],
       device='npu:5'), y = tensor([0.3279, 0.2263, 0.8199, 0.9692, 0.1157, 0.3686, 0.3923, 0.9464],
       device='npu:5'), z=tensor([3.0335], device='npu:5'), z1=tensor([3.1287], device='npu:5')
rank 2 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.4597, 0.8458, 0.6647, 0.5016, 0.6279, 0.2274, 0.6052, 0.0447],
       device='npu:2'), y = tensor([0.9667, 0.6510, 0.7080, 0.3350, 0.3821, 0.2127, 0.7783, 0.5833],
       device='npu:2'), z=tensor([3.7624], device='npu:2'), z1=tensor([3.2589], device='npu:2')
rank 1 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.3866, 0.3066, 0.1267, 0.6147, 0.8146, 0.7271, 0.3425, 0.8121],
       device='npu:1'), y = tensor([0.4144, 0.3269, 0.1725, 0.0747, 0.6389, 0.1744, 0.8382, 0.6625],
       device='npu:1'), z=tensor([3.0895], device='npu:1'), z1=tensor([3.4246], device='npu:1')
rank 7 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.2951, 0.0139, 0.4131, 0.9280, 0.3764, 0.0809, 0.0562, 0.4123],
       device='npu:7'), y = tensor([0.2338, 0.7257, 0.0369, 0.2448, 0.9684, 0.0554, 0.4771, 0.7827],
       device='npu:7'), z=tensor([2.7830], device='npu:7'), z1=tensor([4.7118], device='npu:7')
rank 4 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.8157, 0.0110, 0.0064, 0.0816, 0.8963, 0.1820, 0.9737, 0.4943],
       device='npu:4'), y = tensor([0.7354, 0.3057, 0.4299, 0.8695, 0.4783, 0.6294, 0.3675, 0.3891],
       device='npu:4'), z=tensor([5.6139], device='npu:4'), z1=tensor([3.6776], device='npu:4')
rank 6 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.5787, 0.7362, 0.1746, 0.3652, 0.8454, 0.7393, 0.6327, 0.1332],
       device='npu:6'), y = tensor([0.8657, 0.7017, 0.1281, 0.5622, 0.5803, 0.6310, 0.6485, 0.3444],
       device='npu:6'), z=tensor([3.9473], device='npu:6'), z1=tensor([4.4502], device='npu:6')
rank 0 after reduce_scatter_coalesced sync with FLAGCX_GROUP1: x = tensor([0.1687, 0.1667, 0.6084, 0.8638, 0.8805, 0.1161, 0.6383, 0.4551],
       device='npu:0'), y = tensor([0.9529, 0.2727, 0.0286, 0.9418, 0.3721, 0.6264, 0.4074, 0.9490],
       device='npu:0'), z=tensor([3.9196], device='npu:0'), z1=tensor([5.1016], device='npu:0')
rank 3 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.4081, 0.3744, 0.7777, 0.9712, 0.6375, 0.2465, 0.3232, 0.3850],
       device='npu:3'), y = tensor([0.6049, 0.2146, 0.9350, 0.5193, 0.1418, 0.4308, 0.5409, 0.0543],
       device='npu:3'), z=tensor([0.], device='npu:3'), z1=tensor([0.], device='npu:3')
rank 5 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.8069, 0.6350, 0.9907, 0.7251, 0.5354, 0.7142, 0.3754, 0.0464],
       device='npu:5'), y = tensor([0.3279, 0.2263, 0.8199, 0.9692, 0.1157, 0.3686, 0.3923, 0.9464],
       device='npu:5'), z=tensor([0.], device='npu:5'), z1=tensor([0.], device='npu:5')
rank 1 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.3866, 0.3066, 0.1267, 0.6147, 0.8146, 0.7271, 0.3425, 0.8121],
       device='npu:1'), y = tensor([0.4144, 0.3269, 0.1725, 0.0747, 0.6389, 0.1744, 0.8382, 0.6625],
       device='npu:1'), z=tensor([0.], device='npu:1'), z1=tensor([0.], device='npu:1')
rank 2 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.4597, 0.8458, 0.6647, 0.5016, 0.6279, 0.2274, 0.6052, 0.0447],
       device='npu:2'), y = tensor([0.9667, 0.6510, 0.7080, 0.3350, 0.3821, 0.2127, 0.7783, 0.5833],
       device='npu:2'), z=tensor([0.], device='npu:2'), z1=tensor([0.], device='npu:2')
rank 4 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.8157, 0.0110, 0.0064, 0.0816, 0.8963, 0.1820, 0.9737, 0.4943],
       device='npu:4'), y = tensor([0.7354, 0.3057, 0.4299, 0.8695, 0.4783, 0.6294, 0.3675, 0.3891],
       device='npu:4'), z=tensor([0.], device='npu:4'), z1=tensor([0.], device='npu:4')
rank 7 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.2951, 0.0139, 0.4131, 0.9280, 0.3764, 0.0809, 0.0562, 0.4123],
       device='npu:7'), y = tensor([0.2338, 0.7257, 0.0369, 0.2448, 0.9684, 0.0554, 0.4771, 0.7827],
       device='npu:7'), z=tensor([0.], device='npu:7'), z1=tensor([0.], device='npu:7')
rank 6 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.5787, 0.7362, 0.1746, 0.3652, 0.8454, 0.7393, 0.6327, 0.1332],
       device='npu:6'), y = tensor([0.8657, 0.7017, 0.1281, 0.5622, 0.5803, 0.6310, 0.6485, 0.3444],
       device='npu:6'), z=tensor([0.], device='npu:6'), z1=tensor([0.], device='npu:6')
rank 0 before reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.1687, 0.1667, 0.6084, 0.8638, 0.8805, 0.1161, 0.6383, 0.4551],
       device='npu:0'), y = tensor([0.9529, 0.2727, 0.0286, 0.9418, 0.3721, 0.6264, 0.4074, 0.9490],
       device='npu:0'), z=tensor([0.], device='npu:0'), z1=tensor([0.], device='npu:0')
rank 2 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.4597, 0.8458, 0.6647, 0.5016, 0.6279, 0.2274, 0.6052, 0.0447],
       device='npu:2'), y = tensor([0.9667, 0.6510, 0.7080, 0.3350, 0.3821, 0.2127, 0.7783, 0.5833],
       device='npu:2'), z=tensor([3.7624], device='npu:2'), z1=tensor([3.2589], device='npu:2')
rank 1 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.3866, 0.3066, 0.1267, 0.6147, 0.8146, 0.7271, 0.3425, 0.8121],
       device='npu:1'), y = tensor([0.4144, 0.3269, 0.1725, 0.0747, 0.6389, 0.1744, 0.8382, 0.6625],
       device='npu:1'), z=tensor([3.0895], device='npu:1'), z1=tensor([3.4246], device='npu:1')rank 5 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.8069, 0.6350, 0.9907, 0.7251, 0.5354, 0.7142, 0.3754, 0.0464],
       device='npu:5'), y = tensor([0.3279, 0.2263, 0.8199, 0.9692, 0.1157, 0.3686, 0.3923, 0.9464],
       device='npu:5'), z=tensor([3.0335], device='npu:5'), z1=tensor([3.1287], device='npu:5')rank 7 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.2951, 0.0139, 0.4131, 0.9280, 0.3764, 0.0809, 0.0562, 0.4123],
       device='npu:7'), y = tensor([0.2338, 0.7257, 0.0369, 0.2448, 0.9684, 0.0554, 0.4771, 0.7827],
       device='npu:7'), z=tensor([2.7830], device='npu:7'), z1=tensor([4.7118], device='npu:7')

rank 3 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.4081, 0.3744, 0.7777, 0.9712, 0.6375, 0.2465, 0.3232, 0.3850],
       device='npu:3'), y = tensor([0.6049, 0.2146, 0.9350, 0.5193, 0.1418, 0.4308, 0.5409, 0.0543],
       device='npu:3'), z=tensor([5.0512], device='npu:3'), z1=tensor([4.5165], device='npu:3')

rank 4 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.8157, 0.0110, 0.0064, 0.0816, 0.8963, 0.1820, 0.9737, 0.4943],
       device='npu:4'), y = tensor([0.7354, 0.3057, 0.4299, 0.8695, 0.4783, 0.6294, 0.3675, 0.3891],
       device='npu:4'), z=tensor([5.6139], device='npu:4'), z1=tensor([3.6776], device='npu:4')
rank 6 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.5787, 0.7362, 0.1746, 0.3652, 0.8454, 0.7393, 0.6327, 0.1332],
       device='npu:6'), y = tensor([0.8657, 0.7017, 0.1281, 0.5622, 0.5803, 0.6310, 0.6485, 0.3444],
       device='npu:6'), z=tensor([3.9473], device='npu:6'), z1=tensor([4.4502], device='npu:6')
rank 0 after reduce_scatter_coalesced async with FLAGCX_GROUP1: x = tensor([0.1687, 0.1667, 0.6084, 0.8638, 0.8805, 0.1161, 0.6383, 0.4551],
       device='npu:0'), y = tensor([0.9529, 0.2727, 0.0286, 0.9418, 0.3721, 0.6264, 0.4074, 0.9490],
       device='npu:0'), z=tensor([3.9196], device='npu:0'), z1=tensor([5.1016], device='npu:0')
rank 3 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), x_list = [tensor([0.6182], device='npu:3'), tensor([0.1192], device='npu:3'), tensor([0.3115], device='npu:3'), tensor([0.9716], device='npu:3'), tensor([0.0055], device='npu:3'), tensor([0.2511], device='npu:3'), tensor([0.1765], device='npu:3'), tensor([0.0611], device='npu:3')]
rank 5 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), x_list = [tensor([0.0611], device='npu:5'), tensor([0.5441], device='npu:5'), tensor([0.6311], device='npu:5'), tensor([0.8541], device='npu:5'), tensor([0.7239], device='npu:5'), tensor([0.1995], device='npu:5'), tensor([0.8468], device='npu:5'), tensor([0.3080], device='npu:5')]
rank 1 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), x_list = [tensor([0.0562], device='npu:1'), tensor([0.7900], device='npu:1'), tensor([0.4477], device='npu:1'), tensor([0.3688], device='npu:1'), tensor([0.2973], device='npu:1'), tensor([0.1850], device='npu:1'), tensor([0.9864], device='npu:1'), tensor([0.5871], device='npu:1')]
rank 7 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), x_list = [tensor([0.3729], device='npu:7'), tensor([0.2025], device='npu:7'), tensor([0.8077], device='npu:7'), tensor([0.0696], device='npu:7'), tensor([0.7424], device='npu:7'), tensor([0.3594], device='npu:7'), tensor([0.9608], device='npu:7'), tensor([0.8607], device='npu:7')]
rank 2 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), x_list = [tensor([0.0279], device='npu:2'), tensor([0.7348], device='npu:2'), tensor([0.9633], device='npu:2'), tensor([0.5793], device='npu:2'), tensor([0.1343], device='npu:2'), tensor([0.4566], device='npu:2'), tensor([0.8474], device='npu:2'), tensor([0.7749], device='npu:2')]
rank 4 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), x_list = [tensor([0.1523], device='npu:4'), tensor([0.7800], device='npu:4'), tensor([0.0231], device='npu:4'), tensor([0.3186], device='npu:4'), tensor([0.7534], device='npu:4'), tensor([0.6028], device='npu:4'), tensor([0.1147], device='npu:4'), tensor([0.7131], device='npu:4')]
rank 6 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), x_list = [tensor([0.5718], device='npu:6'), tensor([0.7890], device='npu:6'), tensor([0.5449], device='npu:6'), tensor([0.4023], device='npu:6'), tensor([0.9173], device='npu:6'), tensor([0.0877], device='npu:6'), tensor([0.9767], device='npu:6'), tensor([0.9509], device='npu:6')]
rank 0 before gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), x_list = [tensor([0.7427], device='npu:0'), tensor([0.6436], device='npu:0'), tensor([0.0677], device='npu:0'), tensor([0.0741], device='npu:0'), tensor([0.7020], device='npu:0'), tensor([0.7189], device='npu:0'), tensor([0.5047], device='npu:0'), tensor([0.7127], device='npu:0')]
rank 3 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([3.], device='npu:3'), x_list = [tensor([0.6182], device='npu:3'), tensor([0.1192], device='npu:3'), tensor([0.3115], device='npu:3'), tensor([0.9716], device='npu:3'), tensor([0.0055], device='npu:3'), tensor([0.2511], device='npu:3'), tensor([0.1765], device='npu:3'), tensor([0.0611], device='npu:3')]
rank 5 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([5.], device='npu:5'), x_list = [tensor([0.0611], device='npu:5'), tensor([0.5441], device='npu:5'), tensor([0.6311], device='npu:5'), tensor([0.8541], device='npu:5'), tensor([0.7239], device='npu:5'), tensor([0.1995], device='npu:5'), tensor([0.8468], device='npu:5'), tensor([0.3080], device='npu:5')]rank 0 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([0.], device='npu:0'), x_list = [tensor([0.], device='npu:0'), tensor([1.], device='npu:0'), tensor([2.], device='npu:0'), tensor([3.], device='npu:0'), tensor([4.], device='npu:0'), tensor([5.], device='npu:0'), tensor([6.], device='npu:0'), tensor([7.], device='npu:0')]

rank 1 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([1.], device='npu:1'), x_list = [tensor([0.0562], device='npu:1'), tensor([0.7900], device='npu:1'), tensor([0.4477], device='npu:1'), tensor([0.3688], device='npu:1'), tensor([0.2973], device='npu:1'), tensor([0.1850], device='npu:1'), tensor([0.9864], device='npu:1'), tensor([0.5871], device='npu:1')]rank 7 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([7.], device='npu:7'), x_list = [tensor([0.3729], device='npu:7'), tensor([0.2025], device='npu:7'), tensor([0.8077], device='npu:7'), tensor([0.0696], device='npu:7'), tensor([0.7424], device='npu:7'), tensor([0.3594], device='npu:7'), tensor([0.9608], device='npu:7'), tensor([0.8607], device='npu:7')]rank 2 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([2.], device='npu:2'), x_list = [tensor([0.0279], device='npu:2'), tensor([0.7348], device='npu:2'), tensor([0.9633], device='npu:2'), tensor([0.5793], device='npu:2'), tensor([0.1343], device='npu:2'), tensor([0.4566], device='npu:2'), tensor([0.8474], device='npu:2'), tensor([0.7749], device='npu:2')]


rank 4 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([4.], device='npu:4'), x_list = [tensor([0.1523], device='npu:4'), tensor([0.7800], device='npu:4'), tensor([0.0231], device='npu:4'), tensor([0.3186], device='npu:4'), tensor([0.7534], device='npu:4'), tensor([0.6028], device='npu:4'), tensor([0.1147], device='npu:4'), tensor([0.7131], device='npu:4')]
rank 6 after gather on dst rank 0 with FLAGCX_GROUP1: z = tensor([6.], device='npu:6'), x_list = [tensor([0.5718], device='npu:6'), tensor([0.7890], device='npu:6'), tensor([0.5449], device='npu:6'), tensor([0.4023], device='npu:6'), tensor([0.9173], device='npu:6'), tensor([0.0877], device='npu:6'), tensor([0.9767], device='npu:6'), tensor([0.9509], device='npu:6')]
rank 3 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:3'), x_list = [tensor([0.3228], device='npu:3'), tensor([0.8811], device='npu:3'), tensor([0.0555], device='npu:3'), tensor([0.8122], device='npu:3'), tensor([0.4791], device='npu:3'), tensor([0.4340], device='npu:3'), tensor([0.6673], device='npu:3'), tensor([0.5696], device='npu:3')]
rank 5 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:5'), x_list = [tensor([0.4224], device='npu:5'), tensor([0.3835], device='npu:5'), tensor([0.5616], device='npu:5'), tensor([0.5447], device='npu:5'), tensor([0.4986], device='npu:5'), tensor([0.5552], device='npu:5'), tensor([0.9150], device='npu:5'), tensor([0.3126], device='npu:5')]
rank 7 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:7'), x_list = [tensor([0.7965], device='npu:7'), tensor([0.9520], device='npu:7'), tensor([0.6997], device='npu:7'), tensor([0.1021], device='npu:7'), tensor([0.2321], device='npu:7'), tensor([0.5664], device='npu:7'), tensor([0.7681], device='npu:7'), tensor([0.7610], device='npu:7')]rank 1 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:1'), x_list = [tensor([0.4009], device='npu:1'), tensor([0.3547], device='npu:1'), tensor([0.0124], device='npu:1'), tensor([0.4035], device='npu:1'), tensor([0.6918], device='npu:1'), tensor([0.7207], device='npu:1'), tensor([0.8451], device='npu:1'), tensor([0.8414], device='npu:1')]

rank 2 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:2'), x_list = [tensor([0.5120], device='npu:2'), tensor([0.3897], device='npu:2'), tensor([0.4917], device='npu:2'), tensor([0.0172], device='npu:2'), tensor([0.1608], device='npu:2'), tensor([0.2538], device='npu:2'), tensor([0.2384], device='npu:2'), tensor([0.0215], device='npu:2')]
rank 4 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:4'), x_list = [tensor([0.5847], device='npu:4'), tensor([0.2640], device='npu:4'), tensor([0.7801], device='npu:4'), tensor([0.9353], device='npu:4'), tensor([0.2102], device='npu:4'), tensor([0.8470], device='npu:4'), tensor([0.2419], device='npu:4'), tensor([0.0466], device='npu:4')]
rank 0 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:0'), x_list = [tensor([0.1797], device='npu:0'), tensor([0.8355], device='npu:0'), tensor([0.2642], device='npu:0'), tensor([0.8583], device='npu:0'), tensor([0.4514], device='npu:0'), tensor([0.4172], device='npu:0'), tensor([0.5086], device='npu:0'), tensor([0.8166], device='npu:0')]
rank 6 before scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([-1.], device='npu:6'), x_list = [tensor([0.8803], device='npu:6'), tensor([0.1932], device='npu:6'), tensor([0.7638], device='npu:6'), tensor([0.6633], device='npu:6'), tensor([0.8258], device='npu:6'), tensor([0.1780], device='npu:6'), tensor([0.7725], device='npu:6'), tensor([0.2525], device='npu:6')]
rank 4 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.4514], device='npu:4'), x_list = [tensor([0.5847], device='npu:4'), tensor([0.2640], device='npu:4'), tensor([0.7801], device='npu:4'), tensor([0.9353], device='npu:4'), tensor([0.2102], device='npu:4'), tensor([0.8470], device='npu:4'), tensor([0.2419], device='npu:4'), tensor([0.0466], device='npu:4')]
rank 6 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.5086], device='npu:6'), x_list = [tensor([0.8803], device='npu:6'), tensor([0.1932], device='npu:6'), tensor([0.7638], device='npu:6'), tensor([0.6633], device='npu:6'), tensor([0.8258], device='npu:6'), tensor([0.1780], device='npu:6'), tensor([0.7725], device='npu:6'), tensor([0.2525], device='npu:6')]
rank 5 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.4172], device='npu:5'), x_list = [tensor([0.4224], device='npu:5'), tensor([0.3835], device='npu:5'), tensor([0.5616], device='npu:5'), tensor([0.5447], device='npu:5'), tensor([0.4986], device='npu:5'), tensor([0.5552], device='npu:5'), tensor([0.9150], device='npu:5'), tensor([0.3126], device='npu:5')]
rank 3 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.8583], device='npu:3'), x_list = [tensor([0.3228], device='npu:3'), tensor([0.8811], device='npu:3'), tensor([0.0555], device='npu:3'), tensor([0.8122], device='npu:3'), tensor([0.4791], device='npu:3'), tensor([0.4340], device='npu:3'), tensor([0.6673], device='npu:3'), tensor([0.5696], device='npu:3')]
rank 1 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.8355], device='npu:1'), x_list = [tensor([0.4009], device='npu:1'), tensor([0.3547], device='npu:1'), tensor([0.0124], device='npu:1'), tensor([0.4035], device='npu:1'), tensor([0.6918], device='npu:1'), tensor([0.7207], device='npu:1'), tensor([0.8451], device='npu:1'), tensor([0.8414], device='npu:1')]
rank 2 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.2642], device='npu:2'), x_list = [tensor([0.5120], device='npu:2'), tensor([0.3897], device='npu:2'), tensor([0.4917], device='npu:2'), tensor([0.0172], device='npu:2'), tensor([0.1608], device='npu:2'), tensor([0.2538], device='npu:2'), tensor([0.2384], device='npu:2'), tensor([0.0215], device='npu:2')]
rank 0 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.1797], device='npu:0'), x_list = [tensor([0.1797], device='npu:0'), tensor([0.8355], device='npu:0'), tensor([0.2642], device='npu:0'), tensor([0.8583], device='npu:0'), tensor([0.4514], device='npu:0'), tensor([0.4172], device='npu:0'), tensor([0.5086], device='npu:0'), tensor([0.8166], device='npu:0')]
rank 7 after scatter from src rank 0 with FLAGCX_GROUP2: z = tensor([0.8166], device='npu:7'), x_list = [tensor([0.7965], device='npu:7'), tensor([0.9520], device='npu:7'), tensor([0.6997], device='npu:7'), tensor([0.1021], device='npu:7'), tensor([0.2321], device='npu:7'), tensor([0.5664], device='npu:7'), tensor([0.7681], device='npu:7'), tensor([0.7610], device='npu:7')]
rank 4 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4')], list_y = [tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4')]
rank 0 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')], list_y = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')]
rank 5 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5')], list_y = [tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5')]
rank 3 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3')], list_y = [tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3')]
rank 1 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1')], list_y = [tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1')]
rank 2 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2')], list_y = [tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2')]
rank 6 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6')], list_y = [tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6')]
rank 7 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7')], list_y = [tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7')]
rank 0 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')], list_y = [tensor([0.], device='npu:0'), tensor([1.], device='npu:0'), tensor([2.], device='npu:0'), tensor([3.], device='npu:0'), tensor([4.], device='npu:0'), tensor([5.], device='npu:0'), tensor([6.], device='npu:0'), tensor([7.], device='npu:0')]
rank 2 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2')], list_y = [tensor([0.], device='npu:2'), tensor([1.], device='npu:2'), tensor([2.], device='npu:2'), tensor([3.], device='npu:2'), tensor([4.], device='npu:2'), tensor([5.], device='npu:2'), tensor([6.], device='npu:2'), tensor([7.], device='npu:2')]
rank 1 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1')], list_y = [tensor([0.], device='npu:1'), tensor([1.], device='npu:1'), tensor([2.], device='npu:1'), tensor([3.], device='npu:1'), tensor([4.], device='npu:1'), tensor([5.], device='npu:1'), tensor([6.], device='npu:1'), tensor([7.], device='npu:1')]
rank 0 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0')rank 4 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4')], list_y = [tensor([0.], device='npu:4'), tensor([1.], device='npu:4'), tensor([2.], device='npu:4'), tensor([3.], device='npu:4'), tensor([4.], device='npu:4'), tensor([5.], device='npu:4'), tensor([6.], device='npu:4'), tensor([7.], device='npu:4')]

rank 6 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6')], list_y = [tensor([0.], device='npu:6'), tensor([1.], device='npu:6'), tensor([2.], device='npu:6'), tensor([3.], device='npu:6'), tensor([4.], device='npu:6'), tensor([5.], device='npu:6'), tensor([6.], device='npu:6'), tensor([7.], device='npu:6')]
rank 3 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3')], list_y = [tensor([0.], device='npu:3'), tensor([1.], device='npu:3'), tensor([2.], device='npu:3'), tensor([3.], device='npu:3'), tensor([4.], device='npu:3'), tensor([5.], device='npu:3'), tensor([6.], device='npu:3'), tensor([7.], device='npu:3')]
rank 2 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:2')rank 1 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')

rank 5 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5')], list_y = [tensor([0.], device='npu:5'), tensor([1.], device='npu:5'), tensor([2.], device='npu:5'), tensor([3.], device='npu:5'), tensor([4.], device='npu:5'), tensor([5.], device='npu:5'), tensor([6.], device='npu:5'), tensor([7.], device='npu:5')]
rank 7 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7')], list_y = [tensor([0.], device='npu:7'), tensor([1.], device='npu:7'), tensor([2.], device='npu:7'), tensor([3.], device='npu:7'), tensor([4.], device='npu:7'), tensor([5.], device='npu:7'), tensor([6.], device='npu:7'), tensor([7.], device='npu:7')]
rank 4 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:4')
rank 6 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:6')
rank 3 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:3')
rank 5 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:5')
rank 7 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:7')
rank 0 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:0')
rank 7 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7')
rank 2 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2')
rank 4 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4')
rank 1 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1')
rank 3 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3')
rank 5 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5')rank 6 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6')

rank 0 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0')
rank 7 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:7')
rank 2 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:2')
rank 4 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:4')
rank 1 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')
rank 3 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:3')
rank 5 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:5')
rank 6 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:6')
rank 0 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:0')
rank 4 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:4')
rank 5 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:5')
rank 3 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:3')
rank 1 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:1')
rank 7 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:7')
rank 2 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:2')
rank 6 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:6')
