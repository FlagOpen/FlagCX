NCCL debug information disabled.
torchrun --nproc_per_node 8 --nnodes=1 --node_rank=0 --master_addr="localhost" --master_port=8281 example.py
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ddp backend config is cpu:gloo,npu:flagcx
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]

rank: 0, world_size = 8, prev_rank: 7, next_rank: 1rank: 1, world_size = 8, prev_rank: 0, next_rank: 2

ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 4, world_size = 8, prev_rank: 3, next_rank: 5
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 5, world_size = 8, prev_rank: 4, next_rank: 6
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 7, world_size = 8, prev_rank: 6, next_rank: 0
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 2, world_size = 8, prev_rank: 1, next_rank: 3
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 6, world_size = 8, prev_rank: 5, next_rank: 7
ranks_flagcx: [0, 1, 2, 3, 4, 5, 6, 7]
rank: 3, world_size = 8, prev_rank: 2, next_rank: 4
rank 6 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6')], list_y = [tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6')]
p-perf-huawei-06:3961511:3961511 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 7 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7')], list_y = [tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7')]
p-perf-huawei-06:3961512:3961512 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 4 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4')], list_y = [tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4')]
p-perf-huawei-06:3961509:3961509 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 1 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1')], list_y = [tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1')]
p-perf-huawei-06:3961506:3961506 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
rank 0 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')], list_y = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')]
p-perf-huawei-06:3961505:3961505 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 0 of 8 ranks checked in
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 7 of 8 ranks checked in
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 6 of 8 ranks checked in
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 4 of 8 ranks checked in
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 1 of 8 ranks checked in
rank 3 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3')], list_y = [tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3')]
p-perf-huawei-06:3961508:3961508 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 3 of 8 ranks checked in
rank 2 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2')], list_y = [tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2')]
p-perf-huawei-06:3961507:3961507 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 2 of 8 ranks checked in
rank 5 before all_to_all with FLAGCX_GROUP2: list_x = [tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5')], list_y = [tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5')]
p-perf-huawei-06:3961510:3961510 [0] FLAGCX INFO Bootstrap : Using enp196s0f0:10.1.15.130<0>
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO Bootstrap Root : rank 5 of 8 ranks checked in
p-perf-huawei-06:3961505:3962702 [0] FLAGCX INFO SENT OUT ALL 8 HANDLES
p-perf-huawei-06:3961512:3961512 [0] FLAGCX INFO rank 7 nranks 8 - DONE
p-perf-huawei-06:3961506:3961506 [0] FLAGCX INFO rank 1 nranks 8 - DONE
p-perf-huawei-06:3961511:3961511 [0] FLAGCX INFO rank 6 nranks 8 - DONE
p-perf-huawei-06:3961510:3961510 [0] FLAGCX INFO rank 5 nranks 8 - DONE
p-perf-huawei-06:3961508:3961508 [0] FLAGCX INFO rank 3 nranks 8 - DONE
p-perf-huawei-06:3961507:3961507 [0] FLAGCX INFO rank 2 nranks 8 - DONE
p-perf-huawei-06:3961509:3961509 [0] FLAGCX INFO rank 4 nranks 8 - DONE
p-perf-huawei-06:3961505:3961505 [0] FLAGCX INFO rank 0 nranks 8 - DONE
p-perf-huawei-06:3961505:3961505 [0] FLAGCX INFO rank = 0, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 0, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961507:3961507 [0] FLAGCX INFO rank = 2, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 2, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961511:3961511 [0] FLAGCX INFO rank = 6, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 6, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961510:3961510 [0] FLAGCX INFO rank = 5, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 5, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961512:3961512 [0] FLAGCX INFO rank = 7, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 7, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961509:3961509 [0] FLAGCX INFO rank = 4, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 4, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961508:3961508 [0] FLAGCX INFO rank = 3, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 3, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961506:3961506 [0] FLAGCX INFO rank = 1, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 1, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
rank 2 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2'), tensor([2.], device='npu:2')], list_y = [tensor([1.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2'), tensor([0.], device='npu:2')]
rank 2 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:2')
rank 6 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6'), tensor([6.], device='npu:6')], list_y = [tensor([1.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6'), tensor([0.], device='npu:6')]
rank 6 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:6')
rank 1 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1'), tensor([1.], device='npu:1')], list_y = [tensor([1.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1'), tensor([0.], device='npu:1')]
rank 1 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')
rank 5 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5'), tensor([5.], device='npu:5')], list_y = [tensor([1.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5'), tensor([0.], device='npu:5')]
rank 3 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3'), tensor([3.], device='npu:3')], list_y = [tensor([1.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3'), tensor([0.], device='npu:3')]
rank 5 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:5')
rank 7 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7'), tensor([7.], device='npu:7')], list_y = [tensor([1.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7'), tensor([0.], device='npu:7')]
rank 3 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:3')
rank 0 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')], list_y = [tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0'), tensor([0.], device='npu:0')]
rank 4 after all_to_all with FLAGCX_GROUP2: list_x = [tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4'), tensor([4.], device='npu:4')], list_y = [tensor([1.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4'), tensor([0.], device='npu:4')]
rank 0 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0')
rank 7 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:7')
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 0 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 2 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 6 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 1 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 5 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 3 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 7 of 8 ranks checked in
rank 4 before all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:4')
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO Bootstrap Root : rank 4 of 8 ranks checked in
p-perf-huawei-06:3961505:3963520 [0] FLAGCX INFO SENT OUT ALL 8 HANDLES
p-perf-huawei-06:3961506:3961506 [0] FLAGCX INFO rank 1 nranks 8 - DONE
p-perf-huawei-06:3961505:3961505 [0] FLAGCX INFO rank 0 nranks 8 - DONE
p-perf-huawei-06:3961508:3961508 [0] FLAGCX INFO rank 3 nranks 8 - DONE
p-perf-huawei-06:3961507:3961507 [0] FLAGCX INFO rank 2 nranks 8 - DONE
p-perf-huawei-06:3961512:3961512 [0] FLAGCX INFO rank 7 nranks 8 - DONE
p-perf-huawei-06:3961510:3961510 [0] FLAGCX INFO rank 5 nranks 8 - DONE
p-perf-huawei-06:3961509:3961509 [0] FLAGCX INFO rank 4 nranks 8 - DONE
p-perf-huawei-06:3961511:3961511 [0] FLAGCX INFO rank 6 nranks 8 - DONE
p-perf-huawei-06:3961505:3961505 [0] FLAGCX INFO rank = 0, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 0, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961506:3961506 [0] FLAGCX INFO rank = 1, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 1, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961509:3961509 [0] FLAGCX INFO rank = 4, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 4, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961507:3961507 [0] FLAGCX INFO rank = 2, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 2, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961508:3961508 [0] FLAGCX INFO rank = 3, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 3, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961512:3961512 [0] FLAGCX INFO rank = 7, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 7, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961510:3961510 [0] FLAGCX INFO rank = 5, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 5, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
p-perf-huawei-06:3961511:3961511 [0] FLAGCX INFO rank = 6, nranks = 8, nclusters = 1, cluster_id = 0, cluster_size = 8, cluster_inter_rank = -1, homo_rank = 6, homo_root_rank = 0, homo_inter_rank = -1, homo_ranks = 8, has_single_rank_homo_comm = 0, 
rank 0 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0')
rank 0 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0')
rank 4 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:4')
rank 1 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:1')
rank 6 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:6')
rank 2 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:2')
rank 4 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:4')
rank 1 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:1')
rank 7 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:7')
rank 2 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:2')
rank 3 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:3')
rank 5 after all_to_all_single with FLAGCX_GROUP1 (no splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:5')
rank 6 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 1., 2., 3., 4., 5., 6., 7.], device='npu:6')
rank 7 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:7')
rank 3 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:3')
rank 5 before all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:5')
rank 6 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([6., 6., 6., 6., 6., 6., 6., 6.], device='npu:6'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:6')
rank 2 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([2., 2., 2., 2., 2., 2., 2., 2.], device='npu:2'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:2')
rank 5 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([5., 5., 5., 5., 5., 5., 5., 5.], device='npu:5'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:5')
rank 3 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([3., 3., 3., 3., 3., 3., 3., 3.], device='npu:3'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:3')
rank 7 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([7., 7., 7., 7., 7., 7., 7., 7.], device='npu:7'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:7')
rank 1 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([1., 1., 1., 1., 1., 1., 1., 1.], device='npu:1'), y = tensor([1., 1., 3., 3., 5., 5., 7., 7.], device='npu:1')
rank 4 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([4., 4., 4., 4., 4., 4., 4., 4.], device='npu:4'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:4')
rank 0 after all_to_all_single with FLAGCX_GROUP1 (with splits): x = tensor([0., 0., 0., 0., 0., 0., 0., 0.], device='npu:0'), y = tensor([0., 0., 2., 2., 4., 4., 6., 6.], device='npu:0')
